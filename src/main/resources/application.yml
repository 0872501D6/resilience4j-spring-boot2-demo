spring:
    application.name: resilience4j-demo
    jackson.serialization.indent_output: true

server:
    port: 9080



management.endpoints.web.exposure.include: '*'
management.endpoint.health.show-details: always

info:
    name: ${spring.application.name}
    description: resilience4j demo
    environment: ${spring.profiles.active}
    version: 0.0.1

management.metrics.tags.application: ${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests: true
management.metrics.distribution.percentiles-histogram.resilience4j.circuitbreaker.calls: true

#resilience4j.circuitbreaker.metrics.use_legacy_binder: true

resilience4j.circuitbreaker:
    configs:
        default:
            registerHealthIndicator: true
            ringBufferSizeInClosedState: 10
            ringBufferSizeInHalfOpenState: 3
            automaticTransitionFromOpenToHalfOpenEnabled: true
            waitDurationInOpenState: 2000
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
            ignoreExceptions:
                - io.github.robwin.exception.BusinessException
        shared:
            registerHealthIndicator: true
            ringBufferSizeInClosedState: 100
            ringBufferSizeInHalfOpenState: 30
            waitDurationInOpenState: 1000
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
            ignoreExceptions:
                - io.github.robwin.exception.BusinessException
    instances:
        backendA:
            baseConfig: default
            ringBufferSizeInClosedState: 5
        backendB:
            registerHealthIndicator: true
            ringBufferSizeInClosedState: 10
            ringBufferSizeInHalfOpenState: 3
            waitDurationInOpenState: 1000
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
            recordFailurePredicate: io.github.robwin.exception.RecordFailurePredicate
resilience4j.retry:
    configs:
        default:
            maxRetryAttempts: 2
            waitDuration: 100
            retryExceptions:
                - org.springframework.web.client.HttpServerErrorException
                - java.io.IOException
            ignoreExceptions:
                - io.github.robwin.exception.BusinessException
    instances:
        backendA:
            maxRetryAttempts: 3
        backendB:
            maxRetryAttempts: 3
resilience4j.bulkhead:
    configs:
        default:
            maxConcurrentCall: 100
    instances:
        backendA:
            maxConcurrentCall: 10
        backendB:
            maxWaitTime: 10
            maxConcurrentCall: 20

resilience4j.thread-pool-bulkhead:
    configs:
        default:
            threadPoolProperties:
                maxThreadPoolSize: 4
                coreThreadPoolSize: 2
                queueCapacity: 2
    backends:
        backendA:
            baseConfig: default
        backendB:
            threadPoolProperties:
                maxThreadPoolSize: 1
                coreThreadPoolSize: 1
                queueCapacity: 1

resilience4j.ratelimiter:
    configs:
        default:
            limitForPeriod: 10
    instances:
        backendA:
            limitForPeriod: 10
            limitRefreshPeriodInMillis: 1000
            timeoutInMillis: 0
            registerHealthIndicator: true
            eventConsumerBufferSize: 100
        backendB:
            limitForPeriod: 6
            limitRefreshPeriodInMillis: 500
            timeoutInMillis: 3000
