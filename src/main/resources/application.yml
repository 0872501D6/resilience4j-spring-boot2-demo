spring:
    application.name: resilience4j-demo
    jackson.serialization.indent_output: true

server:
    port: 9080

management.security.enabled: false
management.endpoints.web.exposure.include: '*'
management.endpoint.health.show-details: always

management.endpoints:
    health.mapping.DOWN: OK
    health.mapping.OUT_OF_SERVICE : OK

info:
    name: ${spring.application.name}
    description: resilience4j demo
    environment: ${spring.profiles.active}
    version: 0.0.1

resilience4j.circuitbreaker:
    backends:
        backendA:
            registerHealthIndicator: true
            ringBufferSizeInClosedState: 5
            ringBufferSizeInHalfOpenState: 3
            waitInterval: 5000
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
            ignoreExceptions:
                - io.github.robwin.exception.BusinessException
        backendB:
            registerHealthIndicator: true
            ringBufferSizeInClosedState: 10
            ringBufferSizeInHalfOpenState: 5
            waitInterval: 5000
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
            recordFailurePredicate: io.github.robwin.exception.RecordFailurePredicate
resilience4j.retry:
    backends:
        retryBackendA:
            maxRetryAttempts: 3
            waitDuration: 100
            retryExceptions:
                - org.springframework.web.client.HttpServerErrorException
            ignoreExceptions:
                - io.github.robwin.exception.BusinessException
        retryBackendB:
            maxRetryAttempts: 3
            waitDuration: 100
            retryExceptions:
                - org.springframework.web.client.HttpServerErrorException
            ignoreExceptions:
                - io.github.robwin.exception.BusinessException
resilience4j.bulkhead:
    backends:
        backendA:
            maxConcurrentCall: 1
        backendB:
            maxWaitTime: 10
            maxConcurrentCall: 2